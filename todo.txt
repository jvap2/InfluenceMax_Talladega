-See if we can utilize cuRipples for comparison

-Get scalar Sparse MatVec Mult to work, then try vector kernel

-The random initialization needs to have information passed in between the vectors

-The pagerank version does not need information exchange

-Does terrible with Arvix Data set

- The parameters we want to tune and examine include streams, K, damping factor, and threshold

- The measurements we want from this include percentage of flow and time

- Need to add to the python files to deal with the flow measurements

- See what other influence algorithms networkx has at least

- Take the values that are not zeroed out and pluck more random ones each iteration

-arxiv is messing up with matrix mult for some reason, it is due to the new pr algorithm

- Possible utilize unsupervised learning Hogwild Style to learn communities, and seed them for influence spread

- Three possible avenues to take next:
    (1) Partition the graph either randomly or with a proper community detection method, apply rimr
    (2) Partition the graph into random graphs and apply the percolation optimization
    (3) Based on the results of the percolation paper, is it possible to simply perform vertex cuts?
    (4) What about optimal flow? Is there any way to invert this problem to be minimum flow if specific edges are plucked
    (5) What about using the idea of finding the expected bounds of max/min flow. Find a way to cheaply precondition
    a set of nodes to test if they fall in such bounds
    (6) Divide by degree?